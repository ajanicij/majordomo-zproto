mdp_broker(3)
=============

NAME
----
mdp_broker - Majordomo Broker

SYNOPSIS
--------
----
//  To work with mdp_broker, use the CZMQ zactor API:
//
//  Create new mdp_broker instance, passing logging prefix:
//
//      zactor_t *mdp_broker = zactor_new (mdp_broker, "myname");
//  
//  Destroy mdp_broker instance
//
//      zactor_destroy (&mdp_broker);
//  
//  Enable verbose logging of commands and activity:
//
//      zstr_send (mdp_broker, "VERBOSE");
//
//  Bind mdp_broker to specified endpoint. TCP endpoints may specify
//  the port number as "*" to aquire an ephemeral port:
//
//      zstr_sendx (mdp_broker, "BIND", endpoint, NULL);
//
//  Return assigned port number, specifically when BIND was done using an
//  an ephemeral port:
//
//      zstr_sendx (mdp_broker, "PORT", NULL);
//      char *command, *port_str;
//      zstr_recvx (mdp_broker, &command, &port_str, NULL);
//      assert (streq (command, "PORT"));
//
//  Specify configuration file to load, overwriting any previous loaded
//  configuration file or options:
//
//      zstr_sendx (mdp_broker, "LOAD", filename, NULL);
//
//  Set configuration path value:
//
//      zstr_sendx (mdp_broker, "SET", path, value, NULL);
//    
//  Save configuration data to config file on disk:
//
//      zstr_sendx (mdp_broker, "SAVE", filename, NULL);
//
//  Send zmsg_t instance to mdp_broker:
//
//      zactor_send (mdp_broker, &msg);
//
//  Receive zmsg_t instance from mdp_broker:
//
//      zmsg_t *msg = zactor_recv (mdp_broker);
//
//  This is the mdp_broker constructor as a zactor_fn:
//
void
    mdp_broker (zsock_t *pipe, void *args);

//  Self test of this class
void
    mdp_broker_test (bool verbose);
----

DESCRIPTION
-----------

mdp_broker - Majordomo Broker

Please add @discuss section in ../src/mdp_broker.c.

EXAMPLE
-------
.From mdp_broker_test method
----
//  Simple create/destroy test
mdp_broker_t *self = mdp_broker_new ();
assert (self);
mdp_broker_destroy (&self);
----
