#### mdp_msg - Majordomo Protocol

mdp_msg - Majordomo Protocol

Please add @discuss section in ../src/mdp_msg.c.

This is the class interface:

    //  Create a new empty mdp_msg
    mdp_msg_t *
        mdp_msg_new (void);
    
    //  Destroy a mdp_msg instance
    void
        mdp_msg_destroy (mdp_msg_t **self_p);
    
    //  Receive a mdp_msg from the socket. Returns 0 if OK, -1 if
    //  there was an error. Blocks if there is no message waiting.
    int
        mdp_msg_recv (mdp_msg_t *self, zsock_t *input);
    
    //  Send the mdp_msg to the output socket, does not destroy it
    int
        mdp_msg_send (mdp_msg_t *self, zsock_t *output);
        
    //  Print contents of message to stdout
    void
        mdp_msg_print (mdp_msg_t *self);
    
    //  Get/set the message routing id
    zframe_t *
        mdp_msg_routing_id (mdp_msg_t *self);
    void
        mdp_msg_set_routing_id (mdp_msg_t *self, zframe_t *routing_id);
    
    //  Get the mdp_msg id and printable command
    int
        mdp_msg_id (mdp_msg_t *self);
    void
        mdp_msg_set_id (mdp_msg_t *self, int id);
    const char *
        mdp_msg_command (mdp_msg_t *self);
    
    //  Get/set the service field
    const char *
        mdp_msg_service (mdp_msg_t *self);
    void
        mdp_msg_set_service (mdp_msg_t *self, const char *value);
    
    //  Get a copy of the body field
    zmsg_t *
        mdp_msg_body (mdp_msg_t *self);
    //  Get the body field and transfer ownership to caller
    zmsg_t *
        mdp_msg_get_body (mdp_msg_t *self);
    //  Set the body field, transferring ownership from caller
    void
        mdp_msg_set_body (mdp_msg_t *self, zmsg_t **msg_p);
    
    //  Get a copy of the address field
    zframe_t *
        mdp_msg_address (mdp_msg_t *self);
    //  Get the address field and transfer ownership to caller
    zframe_t *
        mdp_msg_get_address (mdp_msg_t *self);
    //  Set the address field, transferring ownership from caller
    void
        mdp_msg_set_address (mdp_msg_t *self, zframe_t **frame_p);
    
    //  Get a copy of the empty field
    zframe_t *
        mdp_msg_empty (mdp_msg_t *self);
    //  Get the empty field and transfer ownership to caller
    zframe_t *
        mdp_msg_get_empty (mdp_msg_t *self);
    //  Set the empty field, transferring ownership from caller
    void
        mdp_msg_set_empty (mdp_msg_t *self, zframe_t **frame_p);
    
    //  Self test of this class
    int
        mdp_msg_test (bool verbose);

This is the class self test code:

    //  Simple create/destroy test
    mdp_msg_t *self = mdp_msg_new ();
    assert (self);
    mdp_msg_destroy (&self);
    
    //  Create pair of sockets we can send through
    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    zsock_connect (input, "inproc://selftest-mdp_msg");
    
    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    zsock_bind (output, "inproc://selftest-mdp_msg");
    
    //  Encode/send/decode and verify each message type
    int instance;
    self = mdp_msg_new ();
    mdp_msg_set_id (self, MDP_MSG_CLIENT_REQUEST);
    
    mdp_msg_set_service (self, "Life is short but Now lasts for ever");
    zmsg_t *client_request_body = zmsg_new ();
    mdp_msg_set_body (self, &client_request_body);
    zmsg_addstr (mdp_msg_body (self), "Hello, World");
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
        assert (streq (mdp_msg_service (self), "Life is short but Now lasts for ever"));
        assert (zmsg_size (mdp_msg_body (self)) == 1);
    }
    mdp_msg_set_id (self, MDP_MSG_CLIENT_PARTIAL);
    
    mdp_msg_set_service (self, "Life is short but Now lasts for ever");
    zmsg_t *client_partial_body = zmsg_new ();
    mdp_msg_set_body (self, &client_partial_body);
    zmsg_addstr (mdp_msg_body (self), "Hello, World");
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
        assert (streq (mdp_msg_service (self), "Life is short but Now lasts for ever"));
        assert (zmsg_size (mdp_msg_body (self)) == 1);
    }
    mdp_msg_set_id (self, MDP_MSG_CLIENT_FINAL);
    
    mdp_msg_set_service (self, "Life is short but Now lasts for ever");
    zmsg_t *client_final_body = zmsg_new ();
    mdp_msg_set_body (self, &client_final_body);
    zmsg_addstr (mdp_msg_body (self), "Hello, World");
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
        assert (streq (mdp_msg_service (self), "Life is short but Now lasts for ever"));
        assert (zmsg_size (mdp_msg_body (self)) == 1);
    }
    mdp_msg_set_id (self, MDP_MSG_READY);
    
    mdp_msg_set_service (self, "Life is short but Now lasts for ever");
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
        assert (streq (mdp_msg_service (self), "Life is short but Now lasts for ever"));
    }
    mdp_msg_set_id (self, MDP_MSG_WORKER_REQUEST);
    
    zframe_t *worker_request_address = zframe_new ("Captcha Diem", 12);
    mdp_msg_set_address (self, &worker_request_address);
    zframe_t *worker_request_empty = zframe_new ("Captcha Diem", 12);
    mdp_msg_set_empty (self, &worker_request_empty);
    zmsg_t *worker_request_body = zmsg_new ();
    mdp_msg_set_body (self, &worker_request_body);
    zmsg_addstr (mdp_msg_body (self), "Hello, World");
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
        assert (zframe_streq (mdp_msg_address (self), "Captcha Diem"));
        assert (zframe_streq (mdp_msg_empty (self), "Captcha Diem"));
        assert (zmsg_size (mdp_msg_body (self)) == 1);
    }
    mdp_msg_set_id (self, MDP_MSG_WORKER_PARTIAL);
    
    zframe_t *worker_partial_address = zframe_new ("Captcha Diem", 12);
    mdp_msg_set_address (self, &worker_partial_address);
    zframe_t *worker_partial_empty = zframe_new ("Captcha Diem", 12);
    mdp_msg_set_empty (self, &worker_partial_empty);
    zmsg_t *worker_partial_body = zmsg_new ();
    mdp_msg_set_body (self, &worker_partial_body);
    zmsg_addstr (mdp_msg_body (self), "Hello, World");
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
        assert (zframe_streq (mdp_msg_address (self), "Captcha Diem"));
        assert (zframe_streq (mdp_msg_empty (self), "Captcha Diem"));
        assert (zmsg_size (mdp_msg_body (self)) == 1);
    }
    mdp_msg_set_id (self, MDP_MSG_WORKER_FINAL);
    
    zframe_t *worker_final_address = zframe_new ("Captcha Diem", 12);
    mdp_msg_set_address (self, &worker_final_address);
    zframe_t *worker_final_empty = zframe_new ("Captcha Diem", 12);
    mdp_msg_set_empty (self, &worker_final_empty);
    zmsg_t *worker_final_body = zmsg_new ();
    mdp_msg_set_body (self, &worker_final_body);
    zmsg_addstr (mdp_msg_body (self), "Hello, World");
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
        assert (zframe_streq (mdp_msg_address (self), "Captcha Diem"));
        assert (zframe_streq (mdp_msg_empty (self), "Captcha Diem"));
        assert (zmsg_size (mdp_msg_body (self)) == 1);
    }
    mdp_msg_set_id (self, MDP_MSG_HEARTBEAT);
    
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
    }
    mdp_msg_set_id (self, MDP_MSG_DISCONNECT);
    
    //  Send twice
    mdp_msg_send (self, output);
    mdp_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        mdp_msg_recv (self, input);
        assert (mdp_msg_routing_id (self));
    }
    
    mdp_msg_destroy (&self);
    zsock_destroy (&input);
    zsock_destroy (&output);

