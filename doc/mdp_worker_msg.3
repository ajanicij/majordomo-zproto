'\" t
.\"     Title: mdp_worker_msg
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.75.2 <http://docbook.sf.net/>
.\"      Date: 05/18/2015
.\"    Manual: Majordomo Manual
.\"    Source: Majordomo 0.1.0
.\"  Language: English
.\"
.TH "MDP_WORKER_MSG" "3" "05/18/2015" "Majordomo 0\&.1\&.0" "Majordomo Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
mdp_worker_msg \- Majordomo Worker Protocol
.SH "SYNOPSIS"
.sp
.nf
//  Create a new empty mdp_worker_msg
mdp_worker_msg_t *
    mdp_worker_msg_new (void);

//  Destroy a mdp_worker_msg instance
void
    mdp_worker_msg_destroy (mdp_worker_msg_t **self_p);

//  Receive a mdp_worker_msg from the socket\&. Returns 0 if OK, \-1 if
//  there was an error\&. Blocks if there is no message waiting\&.
int
    mdp_worker_msg_recv (mdp_worker_msg_t *self, zsock_t *input);

//  Send the mdp_worker_msg to the output socket, does not destroy it
int
    mdp_worker_msg_send (mdp_worker_msg_t *self, zsock_t *output);

//  Print contents of message to stdout
void
    mdp_worker_msg_print (mdp_worker_msg_t *self);

//  Get/set the message routing id
zframe_t *
    mdp_worker_msg_routing_id (mdp_worker_msg_t *self);
void
    mdp_worker_msg_set_routing_id (mdp_worker_msg_t *self, zframe_t *routing_id);

//  Get the mdp_worker_msg id and printable command
int
    mdp_worker_msg_id (mdp_worker_msg_t *self);
void
    mdp_worker_msg_set_id (mdp_worker_msg_t *self, int id);
const char *
    mdp_worker_msg_command (mdp_worker_msg_t *self);

//  Get/set the service field
const char *
    mdp_worker_msg_service (mdp_worker_msg_t *self);
void
    mdp_worker_msg_set_service (mdp_worker_msg_t *self, const char *value);

//  Get a copy of the address field
zframe_t *
    mdp_worker_msg_address (mdp_worker_msg_t *self);
//  Get the address field and transfer ownership to caller
zframe_t *
    mdp_worker_msg_get_address (mdp_worker_msg_t *self);
//  Set the address field, transferring ownership from caller
void
    mdp_worker_msg_set_address (mdp_worker_msg_t *self, zframe_t **frame_p);

//  Get a copy of the empty field
zframe_t *
    mdp_worker_msg_empty (mdp_worker_msg_t *self);
//  Get the empty field and transfer ownership to caller
zframe_t *
    mdp_worker_msg_get_empty (mdp_worker_msg_t *self);
//  Set the empty field, transferring ownership from caller
void
    mdp_worker_msg_set_empty (mdp_worker_msg_t *self, zframe_t **frame_p);

//  Get a copy of the body field
zmsg_t *
    mdp_worker_msg_body (mdp_worker_msg_t *self);
//  Get the body field and transfer ownership to caller
zmsg_t *
    mdp_worker_msg_get_body (mdp_worker_msg_t *self);
//  Set the body field, transferring ownership from caller
void
    mdp_worker_msg_set_body (mdp_worker_msg_t *self, zmsg_t **msg_p);

//  Self test of this class
int
    mdp_worker_msg_test (bool verbose);
.fi
.SH "DESCRIPTION"
.sp
mdp_worker_msg \- Majordomo Worker Protocol
.sp
Please add @discuss section in \&.\&./src/mdp_worker_msg\&.c\&.
.SH "EXAMPLE"
.PP
\fBFrom mdp_worker_msg_test method\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
//  Simple create/destroy test
mdp_worker_msg_t *self = mdp_worker_msg_new ();
assert (self);
mdp_worker_msg_destroy (&self);

//  Create pair of sockets we can send through
zsock_t *input = zsock_new (ZMQ_ROUTER);
assert (input);
zsock_connect (input, "inproc://selftest\-mdp_worker_msg");

zsock_t *output = zsock_new (ZMQ_DEALER);
assert (output);
zsock_bind (output, "inproc://selftest\-mdp_worker_msg");

//  Encode/send/decode and verify each message type
int instance;
self = mdp_worker_msg_new ();
mdp_worker_msg_set_id (self, MDP_WORKER_MSG_READY);

mdp_worker_msg_set_service (self, "Life is short but Now lasts for ever");
//  Send twice
mdp_worker_msg_send (self, output);
mdp_worker_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mdp_worker_msg_recv (self, input);
    assert (mdp_worker_msg_routing_id (self));
    assert (streq (mdp_worker_msg_service (self), "Life is short but Now lasts for ever"));
}
mdp_worker_msg_set_id (self, MDP_WORKER_MSG_WORKER_REQUEST);

zframe_t *worker_request_address = zframe_new ("Captcha Diem", 12);
mdp_worker_msg_set_address (self, &worker_request_address);
zframe_t *worker_request_empty = zframe_new ("Captcha Diem", 12);
mdp_worker_msg_set_empty (self, &worker_request_empty);
zmsg_t *worker_request_body = zmsg_new ();
mdp_worker_msg_set_body (self, &worker_request_body);
zmsg_addstr (mdp_worker_msg_body (self), "Hello, World");
//  Send twice
mdp_worker_msg_send (self, output);
mdp_worker_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mdp_worker_msg_recv (self, input);
    assert (mdp_worker_msg_routing_id (self));
    assert (zframe_streq (mdp_worker_msg_address (self), "Captcha Diem"));
    assert (zframe_streq (mdp_worker_msg_empty (self), "Captcha Diem"));
    assert (zmsg_size (mdp_worker_msg_body (self)) == 1);
}
mdp_worker_msg_set_id (self, MDP_WORKER_MSG_WORKER_PARTIAL);

zframe_t *worker_partial_address = zframe_new ("Captcha Diem", 12);
mdp_worker_msg_set_address (self, &worker_partial_address);
zframe_t *worker_partial_empty = zframe_new ("Captcha Diem", 12);
mdp_worker_msg_set_empty (self, &worker_partial_empty);
zmsg_t *worker_partial_body = zmsg_new ();
mdp_worker_msg_set_body (self, &worker_partial_body);
zmsg_addstr (mdp_worker_msg_body (self), "Hello, World");
//  Send twice
mdp_worker_msg_send (self, output);
mdp_worker_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mdp_worker_msg_recv (self, input);
    assert (mdp_worker_msg_routing_id (self));
    assert (zframe_streq (mdp_worker_msg_address (self), "Captcha Diem"));
    assert (zframe_streq (mdp_worker_msg_empty (self), "Captcha Diem"));
    assert (zmsg_size (mdp_worker_msg_body (self)) == 1);
}
mdp_worker_msg_set_id (self, MDP_WORKER_MSG_WORKER_FINAL);

zframe_t *worker_final_address = zframe_new ("Captcha Diem", 12);
mdp_worker_msg_set_address (self, &worker_final_address);
zframe_t *worker_final_empty = zframe_new ("Captcha Diem", 12);
mdp_worker_msg_set_empty (self, &worker_final_empty);
zmsg_t *worker_final_body = zmsg_new ();
mdp_worker_msg_set_body (self, &worker_final_body);
zmsg_addstr (mdp_worker_msg_body (self), "Hello, World");
//  Send twice
mdp_worker_msg_send (self, output);
mdp_worker_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mdp_worker_msg_recv (self, input);
    assert (mdp_worker_msg_routing_id (self));
    assert (zframe_streq (mdp_worker_msg_address (self), "Captcha Diem"));
    assert (zframe_streq (mdp_worker_msg_empty (self), "Captcha Diem"));
    assert (zmsg_size (mdp_worker_msg_body (self)) == 1);
}
mdp_worker_msg_set_id (self, MDP_WORKER_MSG_HEARTBEAT);

//  Send twice
mdp_worker_msg_send (self, output);
mdp_worker_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mdp_worker_msg_recv (self, input);
    assert (mdp_worker_msg_routing_id (self));
}
mdp_worker_msg_set_id (self, MDP_WORKER_MSG_DISCONNECT);

//  Send twice
mdp_worker_msg_send (self, output);
mdp_worker_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mdp_worker_msg_recv (self, input);
    assert (mdp_worker_msg_routing_id (self));
}

mdp_worker_msg_destroy (&self);
zsock_destroy (&input);
zsock_destroy (&output);
.fi
.if n \{\
.RE
.\}
.sp
.SH "AUTHORS"
.sp
The majordomo manual was written by the authors in the AUTHORS file\&.
.SH "RESOURCES"
.sp
Main web site: \m[blue]\fB\%\fR\m[]
.sp
Report bugs to the email <\m[blue]\fBzeromq\-dev@lists\&.zeromq\&.org\fR\m[]\&\s-2\u[1]\d\s+2>
.SH "COPYRIGHT"
.sp
Copyright (c) the Contributors as noted in the AUTHORS file\&. This file is part of CZMQ, the high\-level C binding for 0MQ: http://czmq\&.zeromq\&.org\&. This Source Code Form is subject to the terms of the Mozilla Public License, v\&. 2\&.0\&. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla\&.org/MPL/2\&.0/\&. LICENSE included with the majordomo distribution\&.
.SH "NOTES"
.IP " 1." 4
zeromq-dev@lists.zeromq.org
.RS 4
\%mailto:zeromq-dev@lists.zeromq.org
.RE
