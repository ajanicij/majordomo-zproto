<!-- 
    The project.xml generates build environments for:

        * android
        * autotool
        * cmake
        * mingw32
        * cygwin
        * vs2008
        * vs2010
        * vs2012
        * vs2013

    Classes are automatically added to all build environments. Further as you
    add new classes to your project you can generate skeleton header and source 
    files according to http://rfc.zeromq.org/spec:21.

    name := The name of your project
    description := A short description for your project
    script := The gsl script to generate all the stuff !!! DO NOT CHANGE !!!
    email := The email address where to reach you project e.g. mailinglist.
-->
<project
    name = "majordomo"
    description = "Implementation of Majordomo protocol version 0.2."
    script = "zproject.gsl"
    email = "zeromq-dev@lists.zeromq.org"
    >

    <!--
        Includes are processed first, so XML in included files will be
        part of the XML tree
    -->
    <include filename = "license.xml" />

    <!-- 
        Current version of your project. 
        This will be used to package your distribution 
    -->
    <version major = "0" minor = "1" patch = "0" />

    <!--
        Specify which other projects this depends on.
        These projects must be known by zproject, and the list of
        known projects is maintained in the zproject_known_projects.xml model.
        You need not specify subdependencies if they are implied.
    
    <use project = "zyre" min_major= "1" min_minor = "1" min_patch = "0" />
    -->
    <use project = "czmq" min_major = "3" min_minor = "0" min_patch = "0" />

    <!-- Header Files
         name := The name the header file to include without file ending
    <header name = "myproject_prelude" />
    -->

    <!-- 
        Classes, if the class header or source file doesn't exist this will
        generate a skeletons for them.
        use private = "1" for internal classes
    <class name = "myclass">Public class description</class>
    <class name = "someother" private = "1">Private class description</class>
    -->
    
    <class name = "mdp_msg">Majordomo Codec</class>
    <class name = "mdp_client">Majordomo Client</class>
    <class name = "mdp_broker">Majordomo Broker</class>
    <class name = "mdp_worker">Majordomo Worker</class>
    <class name = "mdp_client_msg">Majordomo Client Codec</class>
    <class name = "mdp_worker_msg">Majordomo Worker Codec</class>

    <!--
        Actors, are build using the simple actor framework from czmq. If the 
        actors class header or source file doesn't exist this will generate a
        skeleton for them. The generated test method of the actor will teach
        you how to use them. Also have a look at the czmq docs to learn more
        about actors.
    <actor name = "myactor">Public actor description</actor>
    <actor name = "someactor" private = "1">Private actor description</actor>
    -->
    
    <!--
        Main programs built by the project
                 use private = "1" for internal tools
    <main name = "progname">Exported public tool</main>
    <main name = "progname" private = "1">Internal tool</main>
    <main name = "progname" service = "1">Installed as system service</main>
    -->

    <main name = "mdp_test">Basic test program</main>

    <!-- 
        Models that we build using GSL. 
        This will generate a 'make code' target to build the models.
    <model name = "sockopts" />
    <model name = "zgossip" />
    <model name = "zgossip_msg" />

        If a model should be generated using a specific gsl script,
        this can be set through the script attribute:
    <model name = "hydra_msg" script = "zproto_codec_java.gsl" />

        Additional parameters to the script can be set via nested
        param elements:
    <model name = "hydra_msg" script = "zproto_codec_java.gsl">
        <param name = "root_path" value = "../main" />
    </model>
    -->

    <model name = "mdp_msg" script = "zproto_codec_c.gsl" />
    <model name = "mdp_client" script = "zproto_client_c.gsl" />
    <model name = "mdp_broker" script = "zproto_server_c.gsl" />
    <model name = "mdp_worker" script = "zproto_client_c.gsl" />
    <model name = "mdp_worker_msg" script = "zproto_codec_c.gsl" />
    <model name = "mdp_client_msg" script = "zproto_codec_c.gsl" />

    <!-- Other source files that we need to package
    <extra name = "some_ressource" />
    -->

    <!-- 
        Stuff that needs to be installed:

        NOTICE: If you copied this file to get started you want to delete or
                at least comment out those bin tag as they distribute the
                zproject files.
        
        * Linux -> /usr/local/bin
    -->
    <!--
    <bin name = "zproject.gsl" />
    <bin name = "zproject_projects.gsl" />
    <bin name = "zproject_known_projects.xml" />
    <bin name = "zproject_class_api.gsl" />
    <bin name = "zproject_mkman" />
    
    <bin name = "zproject_actor.gsl" />
    <bin name = "zproject_android.gsl" />
    <bin name = "zproject_autoconf.gsl" />
    <bin name = "zproject_automake.gsl" />
    <bin name = "zproject_bindings_python.gsl" />
    <bin name = "zproject_bindings_qml.gsl" />
    <bin name = "zproject_bindings_ruby.gsl" />
    <bin name = "zproject_ci.gsl" />
    <bin name = "zproject_class.gsl" />
    <bin name = "zproject_cmake.gsl" />
    <bin name = "zproject_docs.gsl" />
    <bin name = "zproject_git.gsl" />
    <bin name = "zproject_lib.gsl" />
    <bin name = "zproject_mingw32.gsl" />
    <bin name = "zproject_cygwin.gsl" />
    <bin name = "zproject_qt_android.gsl" />
    <bin name = "zproject_tools.gsl" />
    <bin name = "zproject_vs2008.gsl" />
    <bin name = "zproject_vs2010.gsl" />
    <bin name = "zproject_vs2012.gsl" />
    <bin name = "zproject_vs2013.gsl" />
    -->
</project>
